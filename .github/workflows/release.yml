name: Release Notesman

on:
  workflow_dispatch:

permissions:
  contents: write
  discussions: write

jobs:
  build-linux:
    name: Build & Release Linux
    runs-on: ubuntu-latest

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-linux-dynamic
      CC: clang
      CXX: clang++

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install system dependencies (Qt6 GUI)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang lld cmake ninja-build pkg-config \
            autoconf automake autoconf-archive libtool libltdl-dev \
            python3 python3-pip curl git unzip zip \
            libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev \
            libxrender-dev libxrandr-dev libxcursor-dev libxinerama-dev libxss-dev \
            libxkbcommon-dev libxkbcommon-x11-dev \
            libxcb1-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev \
            libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev \
            libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-util-dev \
            libxcb-xinput-dev libxcb-cursor-dev libxcb-glx0-dev libxcb-xkb-dev \
            libxcb-xinerama0-dev libxcb-damage0-dev libxcb-composite0-dev \
            libgtk-3-dev libsm-dev libice-dev libpthread-stubs0-dev \
            libwayland-dev libwayland-egl-backend-dev \
            libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev mesa-common-dev libglu1-mesa-dev \
            libfontconfig1-dev libfreetype6-dev libharfbuzz-dev libicu-dev \
            libdbus-1-dev libatspi2.0-dev libinput-dev libmtdev-dev libevdev-dev libts-dev libudev-dev \
            libvulkan-dev \
            libjpeg-dev libpng-dev libtiff-dev libgif-dev libwebp-dev libavif-dev \
            libdouble-conversion-dev libmd4c-dev libb2-dev libproxy-dev zlib1g-dev libssl-dev

      - name: Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmake-version: "3.31.0"

      - name: Setup or restore vcpkg source
        id: cache-vcpkg-source
        uses: actions/cache@v3
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: ${{ runner.os }}-vcpkg-source

      - name: Clone and bootstrap vcpkg if needed
        if: ${{ steps.cache-vcpkg-source.outputs.cache-hit != 'true' }}
        run: |
          git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT
          $VCPKG_ROOT/bootstrap-vcpkg.sh

      - name: Cache vcpkg installed
        id: cache-vcpkg-installed
        uses: actions/cache@v3
        with:
          path: ${{ env.VCPKG_ROOT }}/build/vcpkg_installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Debug cache result
        run: |
          echo "Cache hit: ${{ steps.cache-vcpkg-installed.outputs.cache-hit }}"

      - name: Build md4c-html manually
        run: |
          git clone https://github.com/mity/md4c.git
          cd md4c
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMD4C_BUILD_SHARED=ON -DMD4C_BUILD_STATIC=OFF -DMD4C_BUILD_MD2HTML=ON
          cmake --build . --config Release
          sudo cmake --install . --prefix /usr/local
          
      - name: Install dependencies via vcpkg
        run: |
          $VCPKG_ROOT/vcpkg install --triplet x64-linux-dynamic \
            --overlay-triplets=$GITHUB_WORKSPACE/vcpkg-triplets \
            --clean-after-build
        env:
          VCPKG_FEATURE_FLAGS: manifests

      - name: Save vcpkg installed cache
        if: always() && steps.cache-vcpkg-installed.outputs.cache-hit != 'true' && (test -d ${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_DEFAULT_TRIPLET }}/lib)
        uses: actions/cache/save@v3
        with:
          path: ${{ env.VCPKG_ROOT }}/build/vcpkg_installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}        

      - name: Configure and build (Release)
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_POLICY_DEFAULT_CMP0177=NEW \
            -G Ninja
          cmake --build build --config Release

      - name: Extract project version from CMakeLists.txt
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=VERSION )\d+\.\d+\.\d+' CMakeLists.txt || echo "0.0.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Show extracted version
        run: echo "Extracted version = ${{ steps.get_version.outputs.version }}"          

      - name: Debug Qt6 library locations
        run: |
          echo "üîç Searching for Qt6 libraries and plugins..."
          find "${{ env.VCPKG_ROOT }}" -type f -name "libQt6*.so*" 2>/dev/null | sort || true
          echo ""
          echo "üîç Searching for Qt6 plugins..."
          find "${{ env.VCPKG_ROOT }}" -type f -path "*/plugins/*" 2>/dev/null | sort || true
          echo ""
          echo "‚úÖ Done scanning Qt6 files under $VCPKG_ROOT"

      - name: Bundle Qt runtime libraries
        run: |
          mkdir -p dist
          cp ./bin/Notesman dist/

          echo "üîç Searching for Qt6 shared libraries..."
          QT_LIBS=$(find "${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_DEFAULT_TRIPLET }}/lib" -name "libQt6*.so*" 2>/dev/null)

          # N·∫øu kh√¥ng t√¨m th·∫•y trong installed/, th·ª≠ packages/
          if [ -z "$QT_LIBS" ]; then
            echo "‚ö†Ô∏è  Not found under installed/, trying packages/..."
            QT_LIBS=$(find "${{ env.VCPKG_ROOT }}/packages" -name "libQt6*.so*" 2>/dev/null)
          fi

          if [ -n "$QT_LIBS" ]; then
            echo "‚úÖ Found Qt6 shared libs:"
            echo "$QT_LIBS"
            cp -v $QT_LIBS dist/ || true
          else
            echo "‚ùå No Qt6 shared libraries found."
          fi

          echo ""
          echo "üîç Searching for Qt6 plugins..."
          QT_PLUGINS="${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_DEFAULT_TRIPLET }}/plugins"

          # N·∫øu kh√¥ng c√≥ plugins trong installed/, th·ª≠ packages/
          if [ ! -d "$QT_PLUGINS" ]; then
            echo "‚ö†Ô∏è  Not found under installed/, trying packages/..."
            QT_PLUGINS="${{ env.VCPKG_ROOT }}/packages/qtbase_x64-linux/debug/Qt6/plugins"
          fi

          if [ -d "$QT_PLUGINS" ]; then
            echo "‚úÖ Copying Qt6 plugins from: $QT_PLUGINS"
            cp -vr "$QT_PLUGINS" dist/
          else
            echo "‚ùå No Qt6 plugins directory found."
          fi

          echo ""
          echo "üîç Checking for platform plugin (libqxcb.so)..."
          if [ -f "$QT_PLUGINS/platforms/libqxcb.so" ]; then
            mkdir -p dist/platforms
            cp -v "$QT_PLUGINS/platforms/libqxcb.so" dist/platforms/
          else
            echo "‚ö†Ô∏è  Platform plugin libqxcb.so not found."
          fi

          echo ""
          echo "üì¶ Creating archive..."
          tar -czf notesman-linux-${{ steps.get_version.outputs.version }}.tar.gz -C dist .

          echo "‚úÖ Packaging complete."

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Notesman v${{ steps.get_version.outputs.version }}
          body: "Automated release for Notesman v${{ steps.get_version.outputs.version }}."
          files: notesman-linux-${{ steps.get_version.outputs.version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
