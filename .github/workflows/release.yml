name: Release Notesman

on:
  workflow_dispatch:

jobs:
  build-linux:
    name: Build & Release Linux
    runs-on: ubuntu-latest

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-linux-dynamic
      CC: clang
      CXX: clang++

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install system dependencies (Qt6 GUI)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang lld cmake ninja-build pkg-config autoconf automake autoconf-archive libtool libltdl-dev python3 python3-pip curl git unzip zip libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxrandr-dev libxcursor-dev libxinerama-dev libxss-dev libxkbcommon-dev libxkbcommon-x11-dev libxcb1-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinput-dev libxcb-cursor-dev libxcb-glx0-dev libxcb-xkb-dev libxcb-xinerama0-dev libxcb-damage0-dev libxcb-composite0-dev libgtk-3-dev libsm-dev libice-dev libpthread-stubs0-dev libwayland-dev libwayland-egl-backend-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev mesa-common-dev libglu1-mesa-dev libfontconfig1-dev libfreetype6-dev libharfbuzz-dev libicu-dev libdbus-1-dev libatspi2.0-dev libinput-dev libmtdev-dev libevdev-dev libts-dev libudev-dev libvulkan-dev libjpeg-dev libpng-dev libtiff-dev libgif-dev libwebp-dev libavif-dev libdouble-conversion-dev libmd4c-dev libb2-dev libproxy-dev zlib1g-dev libmd4c-dev libssl-dev

          # sudo apt-get install -y \
          #   clang lld cmake ninja-build \
          #   autoconf libtool pkg-config build-essential autoconf-archive automake \
          #   libltdl-dev \
          #   libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev \
          #   libxi-dev libxrender-dev libxcb1-dev libxcb-keysyms1-dev \
          #   libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev \
          #   libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev \
          #   libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev \
          #   libxcb-util-dev libxcb-xinput-dev libxcb-xinerama0-dev \
          #   libxkbcommon-dev libxkbcommon-x11-dev \
          #   libgl1-mesa-dev libegl1-mesa-dev libdbus-1-dev \
          #   libfontconfig1-dev libfreetype6-dev libicu-dev libvulkan-dev

      - name: Cache vcpkg installed
        uses: actions/cache@v3
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: ${{ runner.os }}-vcpkg-

      - name: Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmake-version: "3.31.0"

      - name: Setup or restore vcpkg source
        id: cache-vcpkg-source
        uses: actions/cache@v3
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: ${{ runner.os }}-vcpkg-source

      - name: Clone and bootstrap vcpkg if needed
        if: steps.cache-vcpkg-source.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT
          $VCPKG_ROOT/bootstrap-vcpkg.sh

      - name: Build md4c-html manually
        run: |
          git clone https://github.com/mity/md4c.git
          cd md4c
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMD4C_BUILD_SHARED=ON -DMD4C_BUILD_STATIC=OFF -DMD4C_BUILD_MD2HTML=ON
          cmake --build . --config Release
          sudo cmake --install . --prefix /usr/local
          
      - name: Install dependencies via vcpkg
        run: |
          $VCPKG_ROOT/vcpkg install

      - name: Configure and build (Release)
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_POLICY_DEFAULT_CMP0177=NEW \
            -G Ninja
          cmake --build build --config Release

      - name: Package binaries
        run: |
          cd build
          tar -czf ../notesman-linux.tar.gz .

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.0
          name: Notesman v1.0.0
          body: "Initial release of Notesman."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact to Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./notesman-linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bundle Qt runtime libraries
        run: |
          mkdir -p dist
          cp build/Notesman dist/
          # Copy Qt runtime từ vcpkg
          cp -v $(find ./vcpkg/installed/x64-linux-dynamic/lib -name "libQt6*.so*") dist/
          cp -v $(find ./vcpkg/installed/x64-linux-dynamic/plugins -type f) dist/ || true
          # Copy platform plugin (bắt buộc)
          mkdir -p dist/platforms
          cp -v ./vcpkg/installed/x64-linux-dynamic/plugins/platforms/libqxcb.so dist/platforms/
          # Đóng gói lại
          tar -czf notesman-linux.tar.gz -C dist .
